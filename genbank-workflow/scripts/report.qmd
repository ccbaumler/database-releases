---
title: "`r params$report_title`"
date: last-modified
date-format: "dddd, [the] D[<sup style='font-size:65%;font-style:italic;'>th</sup>] [of] MMMM, YYYY"
format:
  html:
    embed-resources: true
    toc: true
execute:
  echo: false
  warning: false
params:
  report_title: Database report
  old_details: default_old_date
  new_details: default_new_date
  details_files: default_details
  old_db: default_old_db,dft_o
  new_db: default_new_db,dft_n
  old_mf: default_old_mf
  new_mf: default_new_mf
  failures: default_failures
  config: default_config_dict
  good_assm: default_assembly
  bad_assm: default_historical
  missed: default_missing_sigs
  gathered: default_gathered_sigs
  lineage: default_lineage
  recovered: default_recovered_genomes
  manual_download: default_man_download
  manual_check: default_man_check
  manual_output: default_man_output
  manual_failed: default_man_fail
  manual_log: default_man_log
  output_dir: output/dir/path
  k_list: default_k_list
  scale: default_scale
---

```{r setup}
library(stringr)

library(reticulate)
use_condaenv( condaenv = Sys.getenv("CONDA_PREFIX"), required = TRUE)

options(scipen = 999) # prevent sci notation
```

## Databases updated from `r params$old_details` to `r params$new_details`

The list of database files:

```{r}
new_db_lst <- str_split(params$new_db, ",")
old_db_lst <- str_split(params$old_db, ",")

for (i in seq_along(new_db_lst[[1]])) {
    new_name <- new_db_lst[[1]][i]
    old_name <- old_db_lst[[1]][i]

    lst <- paste("  - Updated", old_name, "to create", basename(new_name))
    cat(lst, "\n\n")
}
```

## Summary of databases

```{python}
config_dict = r.params.get('config')

k_val_list = config_dict.get('k_values')
```

Looking only at the first k-value defined in `r reticulate::py_eval("k_val_list")`.

### Summary example for the old databases

**The manifest for `r old_db_lst[[1]][1]`:**

```{python}
import argparse
import re
import sourmash

#sig_files = r.params.get('new_db').split(',')
#sigs = [sourmash.load_one_signature(sig, ksize=31) for sig in sig_files]
#summary = sourmash.summarize(sigs)

args = argparse.Namespace()
args.quiet = False
args.debug = False
args.json_out = False
args.force = False
args.rebuild_manifest = False
args.path = r.params.get('old_mf')

sourmash.sig.fileinfo(args=args)
```

### Summary example for the new databases

**The manifest for `r new_db_lst[[1]][1]`:**

```{python}
args.path = r.params.get('new_mf')

sourmash.sig.fileinfo(args=args)

```

### Replicate these results:

```{bash}
#| echo: true
#| eval: false

sourmash sig summarize database.zip
```

## Genome report for the updated database 

Databases were updated with the `update_sourmash_databases.py` script in the `scripts` directory.

This compared the existing database against the `r basename(params$good_assm)` and `r basename(params$bad_assm)` files.

**The summary report is below.**

```{r}
writeLines(readLines(params$details_files, n=5))
```

::: {.callout-note collapse="true"}
## Expand for details
```{r}
writeLines(readLines(params$details_files))
```
:::

---

```{r}
missed = readLines(params$missed)
good_assm = readLines(params$good_assm)
lineage = readLines(params$lineage)
```

When checking the final database, there are `r length(missed) - 1` missed signatures of the expected `r length(good_assm) - 2`.

::: {.callout-note collapse="true"}
## Expand for details
```{r}
writeLines(missed)
```
:::

## Genomes failed to download or sketch

```{r}
fail_lines <- readLines(params$failures)
fail_count <- length(fail_lines) - 1 
```

The sourmash plugin [DirectSketch](https://github.com/sourmash-bio/sourmash_plugin_directsketch){target="_blank"} was used to download and sketch the missing or updated genomes. This plugin failed to download `{r} fail_count` sequences.

::: {.callout-note collapse="true"}
## Expand for details
```{r}
writeLines(readLines(params$failures))
```
:::

---

Within the `workflow-cleanup` directory, there are files for manually downloading any missing genomes and manually checking the remaining genomes.

::: {.callout-note collapse="true"}
## Expand for commands
Consider running:
```markdown
```{r}
#| echo: false
#| eval: true
#| results: 'asis'

# Using glue to create code strings
cd_str <- glue::glue("cd {params$output_dir}")
sketch_str <- glue::glue('sourmash scripts gbsketch workflow-cleanup/{basename(params$manual_download)} -o workflow-cleanup{basename(params$manual_output)} --failed workflow-cleanup/{basename(params$manual_failed)} --param-str "dna,{params$k_list},scaled={params$scale},abund" -r 5 -g 2> workflow-cleanup/{basename(params$manual_log)}')
mv_str <- glue::glue("mv {basename(new_db_lst[[1]][1])} {basename(new_db_lst[[1]][2])} {basename(new_db_lst[[1]][3])} workflow-cleanup/ && cd workflow-cleanup/")
cat1_str <- glue::glue("sourmash sig cat {basename(params$manual_output)} {basename(new_db_lst[[1]][1])} -k {reticulate::py$config_dict$k_values[1]} -o ../{old_db_lst[[1]][1]}")
cat2_str <- glue::glue("sourmash sig cat {basename(params$manual_output)} {basename(new_db_lst[[1]][2])} -k {reticulate::py$config_dict$k_values[2]} -o ../{old_db_lst[[1]][2]}")
cat3_str <- glue::glue("sourmash sig cat {basename(params$manual_output)} {basename(new_db_lst[[1]][3])} -k {reticulate::py$config_dict$k_values[3]} -o ../{old_db_lst[[1]][3]}")

# And print the strings into a markdown code block
cat(cd_str)
cat("\n")
cat("\n")
cat(sketch_str)
cat("\n")
cat("\n")
cat(mv_str)
cat("\n")
cat("\n")
cat(cat1_str)
cat("\n")
cat(cat2_str)
cat("\n")
cat(cat3_str)
cat("\n")
```
```
:::

Details below:

```{r}
writeLines(readLines(params$recovered))
```

::: {.callout-note collapse="true"}
## Expand for `r basename(params$manual_download)` details:
```{r}
writeLines(readLines(params$manual_download))
```
:::

::: {.callout-note collapse="true"}
## Expand for `r basename(params$manual_check)` details:
```{r}
writeLines(readLines(params$manual_check))
```
:::

## `r basename(params$lineage)` lineage file created

The lineage of `r length(lineage) - 1` were created from the `r basename(params$good_assm)` file.

::: {.callout-note collapse="true"}
## Expand for details
```{r}
writeLines(lineage)
```
:::

