### update the wort manifest to reflect all available signatures; use updated version here
DATABASES = ['/group/ctbrowngrp/sourmash-db/wort-manifests/2023-05-04.wort.sqlmf'] # wort manifest

### update with metadata for new GTDB release ###
TAG = "rs214"
ARCHAEA_URL='https://data.gtdb.ecogenomic.org/releases/release214/214.0/ar53_metadata_r214.tar.gz'
ARCHAEA_FILE='ar53_metadata_r214.tar.gz'
BACTERIA_URL='https://data.gtdb.ecogenomic.org/releases/release214/214.0/bac120_metadata_r214.tar.gz'
BACTERIA_FILE='bac120_metadata_r214.tar.gz'
########################################
KSIZES=[21,31,51]

rule all:
    input:
        expand("gtdb-{tag}.missing.csv", tag=TAG),
        expand("gtdb-{tag}.manifest.csv", tag=TAG),

rule build:
    input:
        expand("gtdb-{tag}-k{k}.zip", tag=TAG, k=KSIZES),
        expand("gtdb-{tag}-k{k}.reps.zip", tag=TAG, k=KSIZES)

rule check:
    input:
        expand("gtdb-{tag}-k{k}.zip.check", tag=TAG, k=KSIZES)

rule download_gtdb_metadata:
    output:
        arch_metadata='ar53_metadata_r214.tsv',
        bac_metadata='bac120_metadata_r214.tsv',
    params:
        arch_url=ARCHAEA_URL,
        bact_url=BACTERIA_URL,
        arch_file=ARCHAEA_FILE,
        bact_file=BACTERIA_FILE,
    shell: 
        """
        wget {params.arch_url}
        wget {params.bact_url}
        tar xzvf {params.arch_file}
        tar xzvf {params.bact_file}
        rm -rf *tar.gz
        """

rule make_taxonomy:
    input:
        ar53_metadata='ar53_metadata_r214.tsv',
        bac120_metadata='bac120_metadata_r214.tsv',
    output:
        tax_csv="gtdb-{tag}.lineages.csv",
        reps_csv="gtdb-{tag}.lineages.reps.csv",
    shell:
        """
        python make-gtdb-taxonomy.py --metadata-files {input.ar53_metadata} {input.bac120_metadata} \
               -o {output.tax_csv} --reps-csv {output.reps_csv}
        """

rule picklist_check:
    input:
        databases = DATABASES,
        picklist = "gtdb-{tag}.lineages.csv",
    output:
        missing = "gtdb-{tag}.missing.csv",
        manifest = "gtdb-{tag}.manifest.csv",
    shell:
        """
        sourmash sig check --picklist {input.picklist}:ident:ident \
            {input.databases} --output-missing {output.missing} \
            --save-manifest {output.manifest}
        touch {output.missing}
        """

rule picklist_confirm:
    input:
        picklist = "gtdb-{tag}.lineages.csv",
        zip = "gtdb-{tag}-k{k}.zip",
    output:
        confirm = touch("gtdb-{tag}-k{k}.zip.check")
    shell:
        """
        sourmash sig check --picklist {input.picklist}:ident:ident \
            {input.zip} --fail
        """

rule build_abund_zip:
    input:
        databases = DATABASES,
        manifest = "gtdb-{tag}.manifest.csv",
    output:
        "gtdb-{tag}-k{k}.abund.zip"
    shell:
        """
        sourmash sig cat {input.manifest} -k {wildcards.k} -o {output}
        """

rule build_release_zip:
    input:
        abund_zip="gtdb-{tag}-k{k}.abund.zip"
    output:
        "gtdb-{tag}-k{k}.zip"
    shell:
        """
        sourmash sig flatten {input} -k {wildcards.k} -o {output}
        """


rule build_representatives_zip:
    input:
        abund_zip = "gtdb-{tag}-k{k}.zip",
        reps_picklist = "gtdb-{tag}.lineages.reps.csv", 
    output:
        "gtdb-{tag}-k{k}.reps.zip"
    shell:
        """
        sourmash sig flatten --picklist {input.reps_picklist}:ident:ident -k {wildcards.k} -o {output}
        """
